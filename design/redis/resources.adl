from Arm import { Operations, TrackedResource, OkResponse, Response, LongRunning, LongRunningOkResponse }

/// Every ARM service must expose the Operations interface for their service  
@Operations('Microsoft.Cache')                 // see note0
interface Operations;

/// Redis cache resource
@TrackedResource<RedisResource>('Redis','Microsoft.Cache') // see Note1
interface Redis {
    /// Checks that the redis cache name is valid and is not already in use.
    /// - parameters - Parameters supplied to the CheckNameAvailability Redis operation. The only supported resource type is 'Microsoft.Cache/redis'
    /// - returns 200 - Name is available
    @post('/subscriptions/{subscriptionId}/providers/Microsoft.Cache/CheckNameAvailability') // see Note2
    CheckNameAvailability(subscriptionId: SubscriptionIdParameter, parameters: @body CheckNameAvailabilityParameters ): OkResponse<boolean>;

    /// Gets any upgrade notifications for a Redis cache.
    /// - tag Redis
    /// - return 200 - All upgrade notifications in given time range
    @get 
    ListUpgradeNotifications(...): Response<NotificationListResponse>;
    
    /// Retrieve a Redis cache's access keys. This operation requires write permission to the cache resource.
    /// - returns 200 - Lists the keys for the specified Redis cache.
    @post('./listKeys') 
    ListKeys(...): Response<RedisAccessKeys>;

    /// Regenerate Redis cache's access keys. This operation requires write permission to the cache resource.
    /// - param parameters - Specifies which key to regenerate.
    /// - return 200 - Lists the regenerated keys for Redis Cache
    @post('./regenerateKey') 
    RegenerateKey(..., parameters: @body RedisRegenerateKeyParameters): Response<RedisAccessKeys>;
    
    /// Reboot specified Redis node(s). This operation requires write permission to the cache resource. There can be potential data loss.
    /// - param parameters - Specifies which Redis node(s) to reboot.
    /// - return 200 - Reboot operation successfully enqueued
    @post('./forceReboot')
    ForceReboot(..., parameters: @body RedisRebootParameters):Response<RedisForceRebootResponse>;

    /// Import data into Redis cache.
    /// - parameter parameters - Parameters for Redis import operation.
    /// - return 200/204 - Import operation succeeded.
    /// - return 202 - Import operation successfully enqueued; follow the Location header to poll for final outcome.
    @post('./import') 
    @azureLongRunning("Location") 
    ImportData(..., parameters: @body ImportRDBParameters): LongRunningOkResponse<boolean>;

    /// Export data from the redis cache to blobs in a container.
    /// - parameter parameters - Parameters for Redis export operation.
    /// - return 200/204 - Export operation succeeded.
    /// - return 202 - Export operation successfully enqueued; follow the Location header to poll for final outcome.
    @post('./export') 
    @LongRunning("Location") 
    ExportData(..., parameters: @body ExportRDBParameters): LongRunningOkResponse<boolean>;
    
    /// Redis Patch Schedule Resource      
    @ProxySubResource<RedisPatchSchedule>('patchSchedules')  // see note3
    resource PatchSchedules;

    /// Redis Linked Server Resource      
    @ProxySubResource<RedisLinkedServerWithProperties>('linkedServers') // see note4
    resource LinkedServers;

    /// Redis Firewall Rule Resource
    @ProxySubResource<RedisFirewallRule>('firewallRules') // see note5
    resource FirewallRules;
}


/** Notes: 

  //# Note0: implies a List operation for GET /providers/{Namespace}/operations that returns a standard ARM pageable operations result set

  //# NOTE1: armTrackedResource infers  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{name}
  //# CRUD operations are assumed by ArmTrackedResource: 
  //# Create, Update, Delete, List (by subscription) , ListByResourceGroup, Get 


  //# NOTE2: CheckNameAvailability is a method bound to the resource that doesn't fall under the standard path for the resource, so must specify the full path 


  //# NOTE3: armProxySubResource infers  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/patchSchedules/{name}
  //# CRUD operations are assumed by ArmTrackedSubResource: 
  //# Create, Update, Delete, List (by parent resource), Get 
      
  //# NOTE4: armProxySubResource infers  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/linkedServers/{name}
  //# CRUD operations are assumed by ArmTrackedSubResource: 
  //# Create, Update, Delete, List (by parent resource), Get 

  //# NOTE5: armProxySubResource infers  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules/{name}
  //# CRUD operations are assumed by ArmTrackedSubResource: 
  //# Create, Update, Delete, List (by parent resource), Get 
  

*/